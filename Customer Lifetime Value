{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMYPXhA2ooz1Jb5nnRd6AT8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/egafdharmawan/Customer-Lifetime-Value/blob/main/Customer%20Lifetime%20Value\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Intro"
      ],
      "metadata": {
        "id": "KlQaBgOtDCOd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's do some CLV analysis and prediction with lifetimes library to find the best customer and cluster them into few segment. We will use olist dataset as our data, and as model for prediction, we will use lifetime BG/NBD model to predict the transaction and gamma gamma model to predict the monetary value."
      ],
      "metadata": {
        "id": "C-SERi67DE4C"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Library"
      ],
      "metadata": {
        "id": "Uv7ZXN3nej2d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install lifetimes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gYpOb2EatAOW",
        "outputId": "039b9b36-d424-439e-9183-fc825b1472c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: lifetimes in /usr/local/lib/python3.7/dist-packages (0.11.3)\n",
            "Requirement already satisfied: numpy>=1.10.0 in /usr/local/lib/python3.7/dist-packages (from lifetimes) (1.21.6)\n",
            "Requirement already satisfied: autograd>=1.2.0 in /usr/local/lib/python3.7/dist-packages (from lifetimes) (1.5)\n",
            "Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from lifetimes) (1.3.5)\n",
            "Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from lifetimes) (1.7.3)\n",
            "Requirement already satisfied: dill>=0.2.6 in /usr/local/lib/python3.7/dist-packages (from lifetimes) (0.3.5.1)\n",
            "Requirement already satisfied: future>=0.15.2 in /usr/local/lib/python3.7/dist-packages (from autograd>=1.2.0->lifetimes) (0.16.0)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->lifetimes) (2022.4)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->lifetimes) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.24.0->lifetimes) (1.15.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from lifetimes.plotting import *\n",
        "from lifetimes.utils import *\n",
        "from lifetimes import BetaGeoFitter\n",
        "from lifetimes import GammaGammaFitter"
      ],
      "metadata": {
        "id": "U6ismVSPs3pD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Dataset"
      ],
      "metadata": {
        "id": "1C42cqnfemX9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Olist dataset available in separated files, we need to perform some preprocessing in order to make the final dataset. Olist dataset used in this case is olist customer, olist payment and olist order dataset."
      ],
      "metadata": {
        "id": "IrjZ2ribDn-y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "olist_cust = pd.read_csv('https://raw.githubusercontent.com/egafdharmawan/Dataset/main/Olist%20Dataset/olist_customers_dataset.csv')\n",
        "olist_payment = pd.read_csv('https://raw.githubusercontent.com/egafdharmawan/Dataset/main/Olist%20Dataset/olist_order_payments_dataset.csv')\n",
        "olist_order = pd.read_csv('https://raw.githubusercontent.com/egafdharmawan/Dataset/main/Olist%20Dataset/olist_orders_dataset.csv')"
      ],
      "metadata": {
        "id": "cgFZmiMktKW1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Preprocessing"
      ],
      "metadata": {
        "id": "sXnyrIFKepDs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "olist_cust.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vsxcVwtM0R8X",
        "outputId": "a6a84a66-5fec-4d86-ce00-6d4d274a890c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 99441 entries, 0 to 99440\n",
            "Data columns (total 5 columns):\n",
            " #   Column                    Non-Null Count  Dtype \n",
            "---  ------                    --------------  ----- \n",
            " 0   customer_id               99441 non-null  object\n",
            " 1   customer_unique_id        99441 non-null  object\n",
            " 2   customer_zip_code_prefix  99441 non-null  int64 \n",
            " 3   customer_city             99441 non-null  object\n",
            " 4   customer_state            99441 non-null  object\n",
            "dtypes: int64(1), object(4)\n",
            "memory usage: 3.8+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "olist_cust.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "id": "5R2N5QH20TzO",
        "outputId": "86a120a2-e8b3-4b94-9525-bdfe05e385a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        customer_id                customer_unique_id  \\\n",
              "0  06b8999e2fba1a1fbc88172c00ba8bc7  861eff4711a542e4b93843c6dd7febb0   \n",
              "1  18955e83d337fd6b2def6b18a428ac77  290c77bc529b7ac935b93aa66c333dc3   \n",
              "2  4e7b3e00288586ebd08712fdd0374a03  060e732b5b29e8181a18229c7b0b2b5e   \n",
              "3  b2b6027bc5c5109e529d4dc6358b12c3  259dac757896d24d7702b9acbbff3f3c   \n",
              "4  4f2d8ab171c80ec8364f7c12e35b23ad  345ecd01c38d18a9036ed96c73b8d066   \n",
              "\n",
              "   customer_zip_code_prefix          customer_city customer_state  \n",
              "0                     14409                 franca             SP  \n",
              "1                      9790  sao bernardo do campo             SP  \n",
              "2                      1151              sao paulo             SP  \n",
              "3                      8775        mogi das cruzes             SP  \n",
              "4                     13056               campinas             SP  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b6cac5f2-5ef1-4bbb-aa12-1b3ad3c99547\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customer_id</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>customer_zip_code_prefix</th>\n",
              "      <th>customer_city</th>\n",
              "      <th>customer_state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>06b8999e2fba1a1fbc88172c00ba8bc7</td>\n",
              "      <td>861eff4711a542e4b93843c6dd7febb0</td>\n",
              "      <td>14409</td>\n",
              "      <td>franca</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18955e83d337fd6b2def6b18a428ac77</td>\n",
              "      <td>290c77bc529b7ac935b93aa66c333dc3</td>\n",
              "      <td>9790</td>\n",
              "      <td>sao bernardo do campo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4e7b3e00288586ebd08712fdd0374a03</td>\n",
              "      <td>060e732b5b29e8181a18229c7b0b2b5e</td>\n",
              "      <td>1151</td>\n",
              "      <td>sao paulo</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>b2b6027bc5c5109e529d4dc6358b12c3</td>\n",
              "      <td>259dac757896d24d7702b9acbbff3f3c</td>\n",
              "      <td>8775</td>\n",
              "      <td>mogi das cruzes</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4f2d8ab171c80ec8364f7c12e35b23ad</td>\n",
              "      <td>345ecd01c38d18a9036ed96c73b8d066</td>\n",
              "      <td>13056</td>\n",
              "      <td>campinas</td>\n",
              "      <td>SP</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6cac5f2-5ef1-4bbb-aa12-1b3ad3c99547')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b6cac5f2-5ef1-4bbb-aa12-1b3ad3c99547 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b6cac5f2-5ef1-4bbb-aa12-1b3ad3c99547');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "olist_order.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mnzDuTwIu8dV",
        "outputId": "15850da6-68bd-4dd0-9c5c-ddd352f8d9bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 99441 entries, 0 to 99440\n",
            "Data columns (total 8 columns):\n",
            " #   Column                         Non-Null Count  Dtype \n",
            "---  ------                         --------------  ----- \n",
            " 0   order_id                       99441 non-null  object\n",
            " 1   customer_id                    99441 non-null  object\n",
            " 2   order_status                   99441 non-null  object\n",
            " 3   order_purchase_timestamp       99441 non-null  object\n",
            " 4   order_approved_at              99281 non-null  object\n",
            " 5   order_delivered_carrier_date   97658 non-null  object\n",
            " 6   order_delivered_customer_date  96476 non-null  object\n",
            " 7   order_estimated_delivery_date  99441 non-null  object\n",
            "dtypes: object(8)\n",
            "memory usage: 6.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "olist_order.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "ZHXO_paittgg",
        "outputId": "8cad68cc-9fe8-4538-89b1-22b0b9da2989"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           order_id                       customer_id  \\\n",
              "0  e481f51cbdc54678b7cc49136f2d6af7  9ef432eb6251297304e76186b10a928d   \n",
              "1  53cdb2fc8bc7dce0b6741e2150273451  b0830fb4747a6c6d20dea0b8c802d7ef   \n",
              "2  47770eb9100c2d0c44946d9cf07ec65d  41ce2a54c0b03bf3443c3d931a367089   \n",
              "3  949d5b44dbf5de918fe9c16f97b45f8a  f88197465ea7920adcdbec7375364d82   \n",
              "4  ad21c59c0840e6cb83a9ceb5573f8159  8ab97904e6daea8866dbdbc4fb7aad2c   \n",
              "\n",
              "  order_status order_purchase_timestamp    order_approved_at  \\\n",
              "0    delivered      2017-10-02 10:56:33  2017-10-02 11:07:15   \n",
              "1    delivered      2018-07-24 20:41:37  2018-07-26 03:24:27   \n",
              "2    delivered      2018-08-08 08:38:49  2018-08-08 08:55:23   \n",
              "3    delivered      2017-11-18 19:28:06  2017-11-18 19:45:59   \n",
              "4    delivered      2018-02-13 21:18:39  2018-02-13 22:20:29   \n",
              "\n",
              "  order_delivered_carrier_date order_delivered_customer_date  \\\n",
              "0          2017-10-04 19:55:00           2017-10-10 21:25:13   \n",
              "1          2018-07-26 14:31:00           2018-08-07 15:27:45   \n",
              "2          2018-08-08 13:50:00           2018-08-17 18:06:29   \n",
              "3          2017-11-22 13:39:59           2017-12-02 00:28:42   \n",
              "4          2018-02-14 19:46:34           2018-02-16 18:17:02   \n",
              "\n",
              "  order_estimated_delivery_date  \n",
              "0           2017-10-18 00:00:00  \n",
              "1           2018-08-13 00:00:00  \n",
              "2           2018-09-04 00:00:00  \n",
              "3           2017-12-15 00:00:00  \n",
              "4           2018-02-26 00:00:00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-df3ce010-fb18-4713-95dc-a28f6b7cf415\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>order_approved_at</th>\n",
              "      <th>order_delivered_carrier_date</th>\n",
              "      <th>order_delivered_customer_date</th>\n",
              "      <th>order_estimated_delivery_date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>9ef432eb6251297304e76186b10a928d</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>2017-10-02 11:07:15</td>\n",
              "      <td>2017-10-04 19:55:00</td>\n",
              "      <td>2017-10-10 21:25:13</td>\n",
              "      <td>2017-10-18 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53cdb2fc8bc7dce0b6741e2150273451</td>\n",
              "      <td>b0830fb4747a6c6d20dea0b8c802d7ef</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-07-24 20:41:37</td>\n",
              "      <td>2018-07-26 03:24:27</td>\n",
              "      <td>2018-07-26 14:31:00</td>\n",
              "      <td>2018-08-07 15:27:45</td>\n",
              "      <td>2018-08-13 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>47770eb9100c2d0c44946d9cf07ec65d</td>\n",
              "      <td>41ce2a54c0b03bf3443c3d931a367089</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-08-08 08:38:49</td>\n",
              "      <td>2018-08-08 08:55:23</td>\n",
              "      <td>2018-08-08 13:50:00</td>\n",
              "      <td>2018-08-17 18:06:29</td>\n",
              "      <td>2018-09-04 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>949d5b44dbf5de918fe9c16f97b45f8a</td>\n",
              "      <td>f88197465ea7920adcdbec7375364d82</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2017-11-18 19:28:06</td>\n",
              "      <td>2017-11-18 19:45:59</td>\n",
              "      <td>2017-11-22 13:39:59</td>\n",
              "      <td>2017-12-02 00:28:42</td>\n",
              "      <td>2017-12-15 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ad21c59c0840e6cb83a9ceb5573f8159</td>\n",
              "      <td>8ab97904e6daea8866dbdbc4fb7aad2c</td>\n",
              "      <td>delivered</td>\n",
              "      <td>2018-02-13 21:18:39</td>\n",
              "      <td>2018-02-13 22:20:29</td>\n",
              "      <td>2018-02-14 19:46:34</td>\n",
              "      <td>2018-02-16 18:17:02</td>\n",
              "      <td>2018-02-26 00:00:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-df3ce010-fb18-4713-95dc-a28f6b7cf415')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-df3ce010-fb18-4713-95dc-a28f6b7cf415 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-df3ce010-fb18-4713-95dc-a28f6b7cf415');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Merge order and customer dataset to get customer id\n",
        "olist = pd.merge(olist_order, olist_cust, how = \"left\", on = 'customer_id')"
      ],
      "metadata": {
        "id": "vqmmUAr-vT_z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "olist.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AoTWHPltv2Bi",
        "outputId": "f6eff9f7-18af-4cbb-f0c9-f46c48c86497"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 99441 entries, 0 to 99440\n",
            "Data columns (total 12 columns):\n",
            " #   Column                         Non-Null Count  Dtype \n",
            "---  ------                         --------------  ----- \n",
            " 0   order_id                       99441 non-null  object\n",
            " 1   customer_id                    99441 non-null  object\n",
            " 2   order_status                   99441 non-null  object\n",
            " 3   order_purchase_timestamp       99441 non-null  object\n",
            " 4   order_approved_at              99281 non-null  object\n",
            " 5   order_delivered_carrier_date   97658 non-null  object\n",
            " 6   order_delivered_customer_date  96476 non-null  object\n",
            " 7   order_estimated_delivery_date  99441 non-null  object\n",
            " 8   customer_unique_id             99441 non-null  object\n",
            " 9   customer_zip_code_prefix       99441 non-null  int64 \n",
            " 10  customer_city                  99441 non-null  object\n",
            " 11  customer_state                 99441 non-null  object\n",
            "dtypes: int64(1), object(11)\n",
            "memory usage: 9.9+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "olist_payment.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xx0vxo6Nu0Sw",
        "outputId": "93bd546e-04a7-4895-dad5-b7dd09678d4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 103886 entries, 0 to 103885\n",
            "Data columns (total 5 columns):\n",
            " #   Column                Non-Null Count   Dtype  \n",
            "---  ------                --------------   -----  \n",
            " 0   order_id              103886 non-null  object \n",
            " 1   payment_sequential    103886 non-null  int64  \n",
            " 2   payment_type          103886 non-null  object \n",
            " 3   payment_installments  103886 non-null  int64  \n",
            " 4   payment_value         103886 non-null  float64\n",
            "dtypes: float64(1), int64(2), object(2)\n",
            "memory usage: 4.0+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "olist_payment.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 250
        },
        "id": "ZPqEHj2_tq1D",
        "outputId": "daaceda7-1e8f-4c88-d6bc-38b9bc321049"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           order_id  payment_sequential payment_type  \\\n",
              "0  b81ef226f3fe1789b1e8b2acac839d17                   1  credit_card   \n",
              "1  a9810da82917af2d9aefd1278f1dcfa0                   1  credit_card   \n",
              "2  25e8ea4e93396b6fa0d3dd708e76c1bd                   1  credit_card   \n",
              "3  ba78997921bbcdc1373bb41e913ab953                   1  credit_card   \n",
              "4  42fdf880ba16b47b59251dd489d4441a                   1  credit_card   \n",
              "\n",
              "   payment_installments  payment_value  \n",
              "0                     8          99.33  \n",
              "1                     1          24.39  \n",
              "2                     1          65.71  \n",
              "3                     8         107.78  \n",
              "4                     2         128.45  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7ecff68c-a9b5-459d-8fb4-01b4332a6edb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>payment_sequential</th>\n",
              "      <th>payment_type</th>\n",
              "      <th>payment_installments</th>\n",
              "      <th>payment_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>b81ef226f3fe1789b1e8b2acac839d17</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>8</td>\n",
              "      <td>99.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>a9810da82917af2d9aefd1278f1dcfa0</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>1</td>\n",
              "      <td>24.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25e8ea4e93396b6fa0d3dd708e76c1bd</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>1</td>\n",
              "      <td>65.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ba78997921bbcdc1373bb41e913ab953</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>8</td>\n",
              "      <td>107.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42fdf880ba16b47b59251dd489d4441a</td>\n",
              "      <td>1</td>\n",
              "      <td>credit_card</td>\n",
              "      <td>2</td>\n",
              "      <td>128.45</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ecff68c-a9b5-459d-8fb4-01b4332a6edb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7ecff68c-a9b5-459d-8fb4-01b4332a6edb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7ecff68c-a9b5-459d-8fb4-01b4332a6edb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 148
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# we only need monetary value per order\n",
        "olist_payment = olist_payment[['order_id','payment_value']]"
      ],
      "metadata": {
        "id": "PHvvT0ZJ1EC3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# since customer is allowed to paid with more than one method per order, we need to aggregate the value\n",
        "olist_payment = olist_payment.groupby('order_id', as_index=False).agg('sum')"
      ],
      "metadata": {
        "id": "q_4Ilv0g0-p8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Merge all data\n",
        "olist = pd.merge(olist, olist_payment, how = \"left\", on = 'order_id')"
      ],
      "metadata": {
        "id": "J7VVayJuv4NR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Get only the necessary columns\n",
        "olist = olist[['order_id','customer_unique_id','order_purchase_timestamp','payment_value']]"
      ],
      "metadata": {
        "id": "i18kY7kg2Qom"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "olist.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 250
        },
        "id": "V9dCmRT82C-V",
        "outputId": "60ff93b8-a8cf-460f-aae5-a9865d3c7857"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           order_id                customer_unique_id  \\\n",
              "0  e481f51cbdc54678b7cc49136f2d6af7  7c396fd4830fd04220f754e42b4e5bff   \n",
              "1  53cdb2fc8bc7dce0b6741e2150273451  af07308b275d755c9edb36a90c618231   \n",
              "2  47770eb9100c2d0c44946d9cf07ec65d  3a653a41f6f9fc3d2a113cf8398680e8   \n",
              "3  949d5b44dbf5de918fe9c16f97b45f8a  7c142cf63193a1473d2e66489a9ae977   \n",
              "4  ad21c59c0840e6cb83a9ceb5573f8159  72632f0f9dd73dfee390c9b22eb56dd6   \n",
              "\n",
              "  order_purchase_timestamp  payment_value  \n",
              "0      2017-10-02 10:56:33          38.71  \n",
              "1      2018-07-24 20:41:37         141.46  \n",
              "2      2018-08-08 08:38:49         179.12  \n",
              "3      2017-11-18 19:28:06          72.20  \n",
              "4      2018-02-13 21:18:39          28.62  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d5d95dbb-9180-4e00-bad2-8b5469824495\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_unique_id</th>\n",
              "      <th>order_purchase_timestamp</th>\n",
              "      <th>payment_value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>7c396fd4830fd04220f754e42b4e5bff</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>38.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53cdb2fc8bc7dce0b6741e2150273451</td>\n",
              "      <td>af07308b275d755c9edb36a90c618231</td>\n",
              "      <td>2018-07-24 20:41:37</td>\n",
              "      <td>141.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>47770eb9100c2d0c44946d9cf07ec65d</td>\n",
              "      <td>3a653a41f6f9fc3d2a113cf8398680e8</td>\n",
              "      <td>2018-08-08 08:38:49</td>\n",
              "      <td>179.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>949d5b44dbf5de918fe9c16f97b45f8a</td>\n",
              "      <td>7c142cf63193a1473d2e66489a9ae977</td>\n",
              "      <td>2017-11-18 19:28:06</td>\n",
              "      <td>72.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ad21c59c0840e6cb83a9ceb5573f8159</td>\n",
              "      <td>72632f0f9dd73dfee390c9b22eb56dd6</td>\n",
              "      <td>2018-02-13 21:18:39</td>\n",
              "      <td>28.62</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5d95dbb-9180-4e00-bad2-8b5469824495')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d5d95dbb-9180-4e00-bad2-8b5469824495 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d5d95dbb-9180-4e00-bad2-8b5469824495');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Rename Columns\n",
        "olist.columns = ['OrderId', 'CustomerId', 'InvoiceDate', 'Value']\n",
        "olist.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "qp6ZDKa0FUTW",
        "outputId": "af411063-ec7b-4004-b667-be109f74c4f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                            OrderId                        CustomerId  \\\n",
              "0  e481f51cbdc54678b7cc49136f2d6af7  7c396fd4830fd04220f754e42b4e5bff   \n",
              "1  53cdb2fc8bc7dce0b6741e2150273451  af07308b275d755c9edb36a90c618231   \n",
              "2  47770eb9100c2d0c44946d9cf07ec65d  3a653a41f6f9fc3d2a113cf8398680e8   \n",
              "3  949d5b44dbf5de918fe9c16f97b45f8a  7c142cf63193a1473d2e66489a9ae977   \n",
              "4  ad21c59c0840e6cb83a9ceb5573f8159  72632f0f9dd73dfee390c9b22eb56dd6   \n",
              "\n",
              "           InvoiceDate   Value  \n",
              "0  2017-10-02 10:56:33   38.71  \n",
              "1  2018-07-24 20:41:37  141.46  \n",
              "2  2018-08-08 08:38:49  179.12  \n",
              "3  2017-11-18 19:28:06   72.20  \n",
              "4  2018-02-13 21:18:39   28.62  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-28ce4db0-875a-4a08-b953-dbe4f0499df9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OrderId</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>7c396fd4830fd04220f754e42b4e5bff</td>\n",
              "      <td>2017-10-02 10:56:33</td>\n",
              "      <td>38.71</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53cdb2fc8bc7dce0b6741e2150273451</td>\n",
              "      <td>af07308b275d755c9edb36a90c618231</td>\n",
              "      <td>2018-07-24 20:41:37</td>\n",
              "      <td>141.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>47770eb9100c2d0c44946d9cf07ec65d</td>\n",
              "      <td>3a653a41f6f9fc3d2a113cf8398680e8</td>\n",
              "      <td>2018-08-08 08:38:49</td>\n",
              "      <td>179.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>949d5b44dbf5de918fe9c16f97b45f8a</td>\n",
              "      <td>7c142cf63193a1473d2e66489a9ae977</td>\n",
              "      <td>2017-11-18 19:28:06</td>\n",
              "      <td>72.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ad21c59c0840e6cb83a9ceb5573f8159</td>\n",
              "      <td>72632f0f9dd73dfee390c9b22eb56dd6</td>\n",
              "      <td>2018-02-13 21:18:39</td>\n",
              "      <td>28.62</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-28ce4db0-875a-4a08-b953-dbe4f0499df9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-28ce4db0-875a-4a08-b953-dbe4f0499df9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-28ce4db0-875a-4a08-b953-dbe4f0499df9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 154
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Change date into datetime\n",
        "olist[\"InvoiceDate\"] = pd.to_datetime(olist['InvoiceDate'], infer_datetime_format=True)"
      ],
      "metadata": {
        "id": "X5tOQoIJGKMN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "olist.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NDyUpShoFyaI",
        "outputId": "02238e4b-8c58-4990-bedc-29f42f6fb89f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 99441 entries, 0 to 99440\n",
            "Data columns (total 4 columns):\n",
            " #   Column       Non-Null Count  Dtype         \n",
            "---  ------       --------------  -----         \n",
            " 0   OrderId      99441 non-null  object        \n",
            " 1   CustomerId   99441 non-null  object        \n",
            " 2   InvoiceDate  99441 non-null  datetime64[ns]\n",
            " 3   Value        99440 non-null  float64       \n",
            "dtypes: datetime64[ns](1), float64(1), object(2)\n",
            "memory usage: 3.8+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the latest date on dataset\n",
        "olist.InvoiceDate.max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "apYsSP8RHcaq",
        "outputId": "0bddc5ca-d0d9-4884-edbe-05fdeca2bd89"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timestamp('2018-10-17 17:30:18')"
            ]
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for Nan value\n",
        "olist[olist['Value'].isnull()]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "46un8goicoXs",
        "outputId": "ac669135-d47f-4ed5-d206-93a6a1600b90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                OrderId                        CustomerId  \\\n",
              "30710  bfbd0f9bdef84302105ad712db648a6c  830d5b7aaa3b6f1e9ad63703bec97d23   \n",
              "\n",
              "              InvoiceDate  Value  \n",
              "30710 2016-09-15 12:16:38    NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ec826590-d951-4cea-9869-efc2ced05e5e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OrderId</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>30710</th>\n",
              "      <td>bfbd0f9bdef84302105ad712db648a6c</td>\n",
              "      <td>830d5b7aaa3b6f1e9ad63703bec97d23</td>\n",
              "      <td>2016-09-15 12:16:38</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec826590-d951-4cea-9869-efc2ced05e5e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ec826590-d951-4cea-9869-efc2ced05e5e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ec826590-d951-4cea-9869-efc2ced05e5e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# since we don't have any lead why the data is null, and it's only one row, it is safe to drop it\n",
        "olist.dropna(inplace = True)"
      ],
      "metadata": {
        "id": "hwjB9oVEdBb7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "After a few preprocessing step finally we have this dataset consist of order id, customer id, time purchase and the value paid."
      ],
      "metadata": {
        "id": "hvJ2emzFD8S5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Lifetimes Modelling"
      ],
      "metadata": {
        "id": "PTdaaJhthIZh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's move on to modelling, there will be 2 step cover in modelling, first is BG/NBD model for transaction and second is gamma gamma model for monetary value. In BG/NBD Models, we need to modify the data to RFM like dataset, here i used `summary_data_from_transaction_data` function from lifetimes library."
      ],
      "metadata": {
        "id": "bLe24IuMG-G7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## BG/NBD Models"
      ],
      "metadata": {
        "id": "qfcYvC83hYs7"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gfxnw6Wh3GIh"
      },
      "source": [
        "# Modify the data\n",
        "data = summary_data_from_transaction_data(\n",
        "    olist,\n",
        "    'CustomerId',\n",
        "    'InvoiceDate',\n",
        "    monetary_value_col='Value', \n",
        "    observation_period_end='2018-10-17'\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This is how the data looks like, keep in mind that for every user who does only one transaction or non repeat user are not going to be analyse. Since they are unlikely to be alive, the got 0 value in RFM below."
      ],
      "metadata": {
        "id": "W1zmrAkJNRUG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "KYuo5NQ0hf1H",
        "outputId": "05357c65-a23f-4ea2-83a4-7f7d267e63e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  frequency  recency      T  monetary_value\n",
              "CustomerId                                                                 \n",
              "0000366f3b9a7992bf8c76cfdf3221e2        0.0      0.0  160.0             0.0\n",
              "0000b849f77a49e4a4ce2b2a4ca5be3f        0.0      0.0  163.0             0.0\n",
              "0000f46a3911fa3c0805444483337064        0.0      0.0  586.0             0.0\n",
              "0000f6ccb0745a6a4b88665a16c9f078        0.0      0.0  370.0             0.0\n",
              "0004aac84e0df4da2b147fca70cf8255        0.0      0.0  337.0             0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e40e32b7-53d1-4a51-b329-5673df7e091d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>frequency</th>\n",
              "      <th>recency</th>\n",
              "      <th>T</th>\n",
              "      <th>monetary_value</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerId</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0000366f3b9a7992bf8c76cfdf3221e2</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>160.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0000b849f77a49e4a4ce2b2a4ca5be3f</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0000f46a3911fa3c0805444483337064</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>586.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0000f6ccb0745a6a4b88665a16c9f078</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>370.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0004aac84e0df4da2b147fca70cf8255</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>337.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e40e32b7-53d1-4a51-b329-5673df7e091d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e40e32b7-53d1-4a51-b329-5673df7e091d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e40e32b7-53d1-4a51-b329-5673df7e091d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 161
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let us check the frequency and recency of all user."
      ],
      "metadata": {
        "id": "sWs0QhfENxYw"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9y_n1nT78L8e",
        "outputId": "048da809-96c8-4f35-82a4-40b46e6c67bd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "source": [
        "# Distribution Frequency\n",
        "data['frequency'].plot(kind='hist', bins=50)\n",
        "plt.title('Frequency')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Frequency')"
            ]
          },
          "metadata": {},
          "execution_count": 162
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(data['frequency'].describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6sKz87zHhvLB",
        "outputId": "fcbda9ba-792d-4047-e5aa-d5c4448d2d1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count    96095.000000\n",
            "mean         0.024809\n",
            "std          0.182053\n",
            "min          0.000000\n",
            "25%          0.000000\n",
            "50%          0.000000\n",
            "75%          0.000000\n",
            "max         16.000000\n",
            "Name: frequency, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0m9zB7Jeqmtw",
        "outputId": "67d61fa3-01a5-4573-df60-308a6440bc32",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "source": [
        "# Distribution Recency\n",
        "data['recency'].plot(kind='hist', bins=50)\n",
        "plt.title('Recency')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Recency')"
            ]
          },
          "metadata": {},
          "execution_count": 164
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(data['recency'].describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y_g6cqJch_yw",
        "outputId": "dfc5d59b-0d53-4fb1-88ff-251c1a7941d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count    96095.000000\n",
            "mean         2.722982\n",
            "std         25.445408\n",
            "min          0.000000\n",
            "25%          0.000000\n",
            "50%          0.000000\n",
            "75%          0.000000\n",
            "max        633.000000\n",
            "Name: recency, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check Precentage\n",
        "print(sum(data['recency'] == 0) * 100/float(len(data)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tcoGa8J4iBc4",
        "outputId": "5c653d95-4ed9-43a4-b95d-3e6acdd06599"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "97.76367136687652\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Based on the distribution above, the data is mostly 0, mean a lot of customer are not coming back afetr their first transaction. After some analysis we found that in this case, most user are not coming back to perform any transaction around 97%. only less than 3% does repeat transaction, these 3% are the one we analyse and predict for their lifetime value."
      ],
      "metadata": {
        "id": "026rPBRPONeE"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a2JShc3R8Z8w"
      },
      "source": [
        "### Modelling"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# filter only repeat user\n",
        "df = data.query('frequency > 0')"
      ],
      "metadata": {
        "id": "iM62r5amm1aq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YIkT_Oeo8hxV",
        "outputId": "500be497-1753-4fcd-c233-6599a1961041",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# BD/NBD model\n",
        "bgf = BetaGeoFitter(penalizer_coef=0.4)\n",
        "bgf.fit(df['frequency'], df['recency'], df['T'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<lifetimes.BetaGeoFitter: fitted with 2149 subjects, a: 0.18, alpha: 29.06, b: 0.02, r: 0.57>"
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A31bWuxDoHkP",
        "outputId": "1b2c35a7-b03a-4bec-9493-942abc536d46",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        }
      },
      "source": [
        "bgf.summary"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            coef  se(coef)  lower 95% bound  upper 95% bound\n",
              "r       0.567307  0.014163         0.539547         0.595067\n",
              "alpha  29.058458  1.607603        25.907556        32.209360\n",
              "a       0.175266  0.017342         0.141276         0.209255\n",
              "b       0.019636  0.002504         0.014727         0.024544"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-92b51c55-aba5-4809-923e-7bd1f463fd4a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>coef</th>\n",
              "      <th>se(coef)</th>\n",
              "      <th>lower 95% bound</th>\n",
              "      <th>upper 95% bound</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>r</th>\n",
              "      <td>0.567307</td>\n",
              "      <td>0.014163</td>\n",
              "      <td>0.539547</td>\n",
              "      <td>0.595067</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alpha</th>\n",
              "      <td>29.058458</td>\n",
              "      <td>1.607603</td>\n",
              "      <td>25.907556</td>\n",
              "      <td>32.209360</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>a</th>\n",
              "      <td>0.175266</td>\n",
              "      <td>0.017342</td>\n",
              "      <td>0.141276</td>\n",
              "      <td>0.209255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>b</th>\n",
              "      <td>0.019636</td>\n",
              "      <td>0.002504</td>\n",
              "      <td>0.014727</td>\n",
              "      <td>0.024544</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92b51c55-aba5-4809-923e-7bd1f463fd4a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-92b51c55-aba5-4809-923e-7bd1f463fd4a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-92b51c55-aba5-4809-923e-7bd1f463fd4a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 169
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Frequency Recency Matrix"
      ],
      "metadata": {
        "id": "floz4vJ1LqiZ"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3zTVVFge8yOM",
        "outputId": "cdd688c6-2b24-4bd1-9ab9-b896f4f1da25",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        }
      },
      "source": [
        "fig = plt.figure(figsize=(10,6))\n",
        "plot_frequency_recency_matrix(bgf)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x432 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Above are the frequency recency matrix, where the customer who made a lot of transaction, even if it's two years away are more likely to be alive than any other. \n",
        "\n",
        "Customer shown in fade blue (example in (2,200) are still a possible customer, they need attention so we can increase their value. Hopefully they are just between transaction, even if their transaction is infrequently.\n",
        "\n",
        "Customer in top right corner is the hardest customer, the bought a lot of product and we haven't seen them in weeks. They probably have gone."
      ],
      "metadata": {
        "id": "AW0kseUBHJBS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Model Evaluation"
      ],
      "metadata": {
        "id": "ER_ez9FOQgrr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "it is important for to know how our model perform before move foward with further analysis. In this section, we will perform model fit evaluation by comparing our prediction and the actual data itself."
      ],
      "metadata": {
        "id": "vHqGT0nZSpgk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plot_period_transactions(bgf, max_frequency=10)"
      ],
      "metadata": {
        "id": "nITB_KkTliD5",
        "outputId": "63527438-a15f-472e-afd6-940e60257f40",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 325
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f1eb0a5d590>"
            ]
          },
          "metadata": {},
          "execution_count": 171
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bCX1tg8V9-gC"
      },
      "source": [
        "based on the diagram above, blue bar is the actual data of how many customer in each transaction cluster while orange is the prediction our model make. We can tell that this model perform well in predicting the actual data. we may seem the model is a little bit pesimistic in making prediction, but this is well enough."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "50qK4NrP9dW6"
      },
      "source": [
        "### Best Customer"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "After the model we define above, we can actually find our best customer by predict their purchases in some period in the future, we may also tell how likely they are to stay alive. For example let us perform the prediction for 30 days in the future and see how many purchases made by these customer."
      ],
      "metadata": {
        "id": "27eBXkGcTiIi"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e9NtLwDs9i8K"
      },
      "source": [
        "t = 30\n",
        "df['predicted_purchases'] = bgf.conditional_expected_number_of_purchases_up_to_time(\n",
        "    t, df['frequency'], df['recency'], df['T']\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['prob_alive'] = bgf.conditional_probability_alive(\n",
        "    df['frequency'], df['recency'], df['T']\n",
        ")"
      ],
      "metadata": {
        "id": "jSwd3ZrqlltN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "These people are our top 10 with the highest predicted purchase in next 30 days. Customer `8d50f5eadf50201ccdcedfb9e2ac8455` with 16 recency, and 56 monetary value has the highest probability of another transactions in next month, he also has the highest alive probability among other customers."
      ],
      "metadata": {
        "id": "UANhprwrTnUb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.sort_values(by='predicted_purchases', ascending = False).head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 438
        },
        "id": "qDXKHcubkIl4",
        "outputId": "c2a7fde4-cb3d-4a56-8f7b-a7591feb7a1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  frequency  recency      T  monetary_value  \\\n",
              "CustomerId                                                                    \n",
              "8d50f5eadf50201ccdcedfb9e2ac8455       16.0    462.0  520.0       56.553750   \n",
              "ba84da8c159659f116329563a0a981dd        2.0     31.0   52.0       94.630000   \n",
              "af5454198a97379394cacf676e1e96cb        2.0     54.0   68.0      197.550000   \n",
              "ef0103e9602d12594d19c2b666219bc1        2.0     19.0   49.0       84.580000   \n",
              "230a1e9f42924d41f37fd22a1d4a9707        2.0     42.0   83.0       69.460000   \n",
              "394ac4de8f3acb14253c177f0e15bc58        4.0    236.0  299.0      149.282500   \n",
              "e0836a97eaae86ac4adc26fbb334a527        2.0     62.0  113.0       32.955000   \n",
              "ff36be26206fffe1eb37afd54c70e18b        2.0     26.0   81.0       92.760000   \n",
              "6469f99c1f9dfae7733b25662e7f1782        5.0    282.0  393.0      133.412000   \n",
              "ca77025e7201e3b30c44b472ff346268        6.0    235.0  373.0      138.941667   \n",
              "\n",
              "                                  predicted_purchases  prob_alive  \n",
              "CustomerId                                                         \n",
              "8d50f5eadf50201ccdcedfb9e2ac8455             0.838427    0.930939  \n",
              "ba84da8c159659f116329563a0a981dd             0.662439    0.729302  \n",
              "af5454198a97379394cacf676e1e96cb             0.607737    0.795921  \n",
              "ef0103e9602d12594d19c2b666219bc1             0.589708    0.626131  \n",
              "230a1e9f42924d41f37fd22a1d4a9707             0.427678    0.643697  \n",
              "394ac4de8f3acb14253c177f0e15bc58             0.358333    0.866765  \n",
              "e0836a97eaae86ac4adc26fbb334a527             0.342908    0.650019  \n",
              "ff36be26206fffe1eb37afd54c70e18b             0.335138    0.495685  \n",
              "6469f99c1f9dfae7733b25662e7f1782             0.317105    0.807478  \n",
              "ca77025e7201e3b30c44b472ff346268             0.313248    0.644222  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-889857a8-efc3-4cab-b956-6ebc3e0f0c6a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>frequency</th>\n",
              "      <th>recency</th>\n",
              "      <th>T</th>\n",
              "      <th>monetary_value</th>\n",
              "      <th>predicted_purchases</th>\n",
              "      <th>prob_alive</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerId</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8d50f5eadf50201ccdcedfb9e2ac8455</th>\n",
              "      <td>16.0</td>\n",
              "      <td>462.0</td>\n",
              "      <td>520.0</td>\n",
              "      <td>56.553750</td>\n",
              "      <td>0.838427</td>\n",
              "      <td>0.930939</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ba84da8c159659f116329563a0a981dd</th>\n",
              "      <td>2.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>94.630000</td>\n",
              "      <td>0.662439</td>\n",
              "      <td>0.729302</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>af5454198a97379394cacf676e1e96cb</th>\n",
              "      <td>2.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>68.0</td>\n",
              "      <td>197.550000</td>\n",
              "      <td>0.607737</td>\n",
              "      <td>0.795921</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ef0103e9602d12594d19c2b666219bc1</th>\n",
              "      <td>2.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>84.580000</td>\n",
              "      <td>0.589708</td>\n",
              "      <td>0.626131</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>230a1e9f42924d41f37fd22a1d4a9707</th>\n",
              "      <td>2.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>83.0</td>\n",
              "      <td>69.460000</td>\n",
              "      <td>0.427678</td>\n",
              "      <td>0.643697</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>394ac4de8f3acb14253c177f0e15bc58</th>\n",
              "      <td>4.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>299.0</td>\n",
              "      <td>149.282500</td>\n",
              "      <td>0.358333</td>\n",
              "      <td>0.866765</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>e0836a97eaae86ac4adc26fbb334a527</th>\n",
              "      <td>2.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>32.955000</td>\n",
              "      <td>0.342908</td>\n",
              "      <td>0.650019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ff36be26206fffe1eb37afd54c70e18b</th>\n",
              "      <td>2.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>81.0</td>\n",
              "      <td>92.760000</td>\n",
              "      <td>0.335138</td>\n",
              "      <td>0.495685</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6469f99c1f9dfae7733b25662e7f1782</th>\n",
              "      <td>5.0</td>\n",
              "      <td>282.0</td>\n",
              "      <td>393.0</td>\n",
              "      <td>133.412000</td>\n",
              "      <td>0.317105</td>\n",
              "      <td>0.807478</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ca77025e7201e3b30c44b472ff346268</th>\n",
              "      <td>6.0</td>\n",
              "      <td>235.0</td>\n",
              "      <td>373.0</td>\n",
              "      <td>138.941667</td>\n",
              "      <td>0.313248</td>\n",
              "      <td>0.644222</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-889857a8-efc3-4cab-b956-6ebc3e0f0c6a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-889857a8-efc3-4cab-b956-6ebc3e0f0c6a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-889857a8-efc3-4cab-b956-6ebc3e0f0c6a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 174
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.query('predicted_purchases > 0.5')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 250
        },
        "id": "qu-De2RBnaaJ",
        "outputId": "94f5d000-b9de-4f8d-89a5-975e95a6195d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  frequency  recency      T  monetary_value  \\\n",
              "CustomerId                                                                    \n",
              "8d50f5eadf50201ccdcedfb9e2ac8455       16.0    462.0  520.0        56.55375   \n",
              "af5454198a97379394cacf676e1e96cb        2.0     54.0   68.0       197.55000   \n",
              "ba84da8c159659f116329563a0a981dd        2.0     31.0   52.0        94.63000   \n",
              "ef0103e9602d12594d19c2b666219bc1        2.0     19.0   49.0        84.58000   \n",
              "\n",
              "                                  predicted_purchases  prob_alive  \n",
              "CustomerId                                                         \n",
              "8d50f5eadf50201ccdcedfb9e2ac8455             0.838427    0.930939  \n",
              "af5454198a97379394cacf676e1e96cb             0.607737    0.795921  \n",
              "ba84da8c159659f116329563a0a981dd             0.662439    0.729302  \n",
              "ef0103e9602d12594d19c2b666219bc1             0.589708    0.626131  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b3044d4b-4c77-422f-89e6-6ae4969fd7bd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>frequency</th>\n",
              "      <th>recency</th>\n",
              "      <th>T</th>\n",
              "      <th>monetary_value</th>\n",
              "      <th>predicted_purchases</th>\n",
              "      <th>prob_alive</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerId</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8d50f5eadf50201ccdcedfb9e2ac8455</th>\n",
              "      <td>16.0</td>\n",
              "      <td>462.0</td>\n",
              "      <td>520.0</td>\n",
              "      <td>56.55375</td>\n",
              "      <td>0.838427</td>\n",
              "      <td>0.930939</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>af5454198a97379394cacf676e1e96cb</th>\n",
              "      <td>2.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>68.0</td>\n",
              "      <td>197.55000</td>\n",
              "      <td>0.607737</td>\n",
              "      <td>0.795921</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ba84da8c159659f116329563a0a981dd</th>\n",
              "      <td>2.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>52.0</td>\n",
              "      <td>94.63000</td>\n",
              "      <td>0.662439</td>\n",
              "      <td>0.729302</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ef0103e9602d12594d19c2b666219bc1</th>\n",
              "      <td>2.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>84.58000</td>\n",
              "      <td>0.589708</td>\n",
              "      <td>0.626131</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3044d4b-4c77-422f-89e6-6ae4969fd7bd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b3044d4b-4c77-422f-89e6-6ae4969fd7bd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b3044d4b-4c77-422f-89e6-6ae4969fd7bd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 175
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H7YQXDPC9tya"
      },
      "source": [
        "Listed above are our top customers that the model expects them to make purchases in the next month. The BG/NBD model believes these individuals will be making more purchases within the near future as they are our current best customers."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Customer transactions predictions"
      ],
      "metadata": {
        "id": "WI5fmUFFPOcV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Based on the history our model learned, we can make prediction in some certain period of time to spesific customer, for example, let's find out how well our best customer above perform his transaction in next 2 months."
      ],
      "metadata": {
        "id": "XEtB05jZXQHk"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HuKErjyw-1GJ",
        "outputId": "a153d36a-05bf-4984-e45f-d701e5868791",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "t = 60 \n",
        "individual = df.loc['8d50f5eadf50201ccdcedfb9e2ac8455']\n",
        "bgf.predict(t, individual['frequency'], individual['recency'], individual['T'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.6686648633614751"
            ]
          },
          "metadata": {},
          "execution_count": 176
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Turn out in 2 months, this user may purchases 1, or maybe 2 transaction."
      ],
      "metadata": {
        "id": "Vz_cxgd1YGWm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "t = 60\n",
        "bgf.predict(t, df['frequency'], df['recency'], df['T'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XuO7sgqGxPWw",
        "outputId": "18e731fc-bad7-4361-8db5-c8878d47709f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CustomerId\n",
              "00172711b30d52eea8b313a7f2cced02    0.021200\n",
              "004288347e5e88a27ded2bb23747066c    0.005406\n",
              "004b45ec5c64187465168251cd1c9c2f    0.011846\n",
              "0058f300f57d7b93c477a131a59b36c3    0.003557\n",
              "00a39521eb40f7012db50455bf083460    0.005506\n",
              "                                      ...   \n",
              "ff03923ad1eb9e32304deb7f9b2a45c9    0.007307\n",
              "ff22e30958c13ffe219db7d711e8f564    0.034001\n",
              "ff36be26206fffe1eb37afd54c70e18b    0.651814\n",
              "ff8892f7c26aa0446da53d01b18df463    0.004401\n",
              "ff922bdd6bafcdf99cb90d7f39cea5b3    0.074887\n",
              "Length: 2149, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 177
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yLt_ac5U-9eB"
      },
      "source": [
        "We have 2149 user who may make another purchases in next two months, though the probability mostly low."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Customer history alives"
      ],
      "metadata": {
        "id": "CPuRwjYxRbz7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can also track their purchases history, for some certain customer to see their alive probability. Below are our best customer with highest alive probability. Some of them are one we saw in section above, other is the customer with not to high probability of repeat purchases, but they do have high alive probability."
      ],
      "metadata": {
        "id": "Kt4yYxvlYiqo"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X358Hs__-n6u",
        "outputId": "6f100210-fa30-4ad6-fad9-3144e73ea4a7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 438
        }
      },
      "source": [
        "df.sort_values(by='prob_alive', ascending = False).head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  frequency  recency      T  monetary_value  \\\n",
              "CustomerId                                                                    \n",
              "8d50f5eadf50201ccdcedfb9e2ac8455       16.0    462.0  520.0       56.553750   \n",
              "dc813062e0fc23409cd255f7f53c7074        5.0    418.0  473.0      151.606000   \n",
              "4facc2e6fbc2bffab2fea92d2b4aa7e4        3.0    421.0  486.0      532.320000   \n",
              "7305430719d715992b00be82af4a6aa8        3.0    400.0  462.0       70.680000   \n",
              "083ca1aa470c280236380973a48f77c6        3.0    381.0  446.0       93.070000   \n",
              "394ac4de8f3acb14253c177f0e15bc58        4.0    236.0  299.0      149.282500   \n",
              "4e65032f1f574189fb793bac5a867bbc        4.0    445.0  570.0      114.387500   \n",
              "a0abd26659c9914690cbd3320d39fd96        3.0    392.0  508.0       64.643333   \n",
              "e53fd5575f1418397aae732c5755b6fc        2.0    492.0  550.0       51.040000   \n",
              "c37cc6c1a59d81460a3059744f7ada1c        3.0    354.0  472.0      163.860000   \n",
              "\n",
              "                                  predicted_purchases  prob_alive  \n",
              "CustomerId                                                         \n",
              "8d50f5eadf50201ccdcedfb9e2ac8455             0.838427    0.930939  \n",
              "dc813062e0fc23409cd255f7f53c7074             0.305144    0.923203  \n",
              "4facc2e6fbc2bffab2fea92d2b4aa7e4             0.180906    0.876871  \n",
              "7305430719d715992b00be82af4a6aa8             0.189678    0.876845  \n",
              "083ca1aa470c280236380973a48f77c6             0.194953    0.872081  \n",
              "394ac4de8f3acb14253c177f0e15bc58             0.358333    0.866765  \n",
              "4e65032f1f574189fb793bac5a867bbc             0.194542    0.855414  \n",
              "a0abd26659c9914690cbd3320d39fd96             0.164008    0.828683  \n",
              "e53fd5575f1418397aae732c5755b6fc             0.107765    0.816070  \n",
              "c37cc6c1a59d81460a3059744f7ada1c             0.172921    0.815541  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-016f299a-e328-4f2b-b12f-bac599347d92\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>frequency</th>\n",
              "      <th>recency</th>\n",
              "      <th>T</th>\n",
              "      <th>monetary_value</th>\n",
              "      <th>predicted_purchases</th>\n",
              "      <th>prob_alive</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CustomerId</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8d50f5eadf50201ccdcedfb9e2ac8455</th>\n",
              "      <td>16.0</td>\n",
              "      <td>462.0</td>\n",
              "      <td>520.0</td>\n",
              "      <td>56.553750</td>\n",
              "      <td>0.838427</td>\n",
              "      <td>0.930939</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dc813062e0fc23409cd255f7f53c7074</th>\n",
              "      <td>5.0</td>\n",
              "      <td>418.0</td>\n",
              "      <td>473.0</td>\n",
              "      <td>151.606000</td>\n",
              "      <td>0.305144</td>\n",
              "      <td>0.923203</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4facc2e6fbc2bffab2fea92d2b4aa7e4</th>\n",
              "      <td>3.0</td>\n",
              "      <td>421.0</td>\n",
              "      <td>486.0</td>\n",
              "      <td>532.320000</td>\n",
              "      <td>0.180906</td>\n",
              "      <td>0.876871</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7305430719d715992b00be82af4a6aa8</th>\n",
              "      <td>3.0</td>\n",
              "      <td>400.0</td>\n",
              "      <td>462.0</td>\n",
              "      <td>70.680000</td>\n",
              "      <td>0.189678</td>\n",
              "      <td>0.876845</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>083ca1aa470c280236380973a48f77c6</th>\n",
              "      <td>3.0</td>\n",
              "      <td>381.0</td>\n",
              "      <td>446.0</td>\n",
              "      <td>93.070000</td>\n",
              "      <td>0.194953</td>\n",
              "      <td>0.872081</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>394ac4de8f3acb14253c177f0e15bc58</th>\n",
              "      <td>4.0</td>\n",
              "      <td>236.0</td>\n",
              "      <td>299.0</td>\n",
              "      <td>149.282500</td>\n",
              "      <td>0.358333</td>\n",
              "      <td>0.866765</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4e65032f1f574189fb793bac5a867bbc</th>\n",
              "      <td>4.0</td>\n",
              "      <td>445.0</td>\n",
              "      <td>570.0</td>\n",
              "      <td>114.387500</td>\n",
              "      <td>0.194542</td>\n",
              "      <td>0.855414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>a0abd26659c9914690cbd3320d39fd96</th>\n",
              "      <td>3.0</td>\n",
              "      <td>392.0</td>\n",
              "      <td>508.0</td>\n",
              "      <td>64.643333</td>\n",
              "      <td>0.164008</td>\n",
              "      <td>0.828683</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>e53fd5575f1418397aae732c5755b6fc</th>\n",
              "      <td>2.0</td>\n",
              "      <td>492.0</td>\n",
              "      <td>550.0</td>\n",
              "      <td>51.040000</td>\n",
              "      <td>0.107765</td>\n",
              "      <td>0.816070</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>c37cc6c1a59d81460a3059744f7ada1c</th>\n",
              "      <td>3.0</td>\n",
              "      <td>354.0</td>\n",
              "      <td>472.0</td>\n",
              "      <td>163.860000</td>\n",
              "      <td>0.172921</td>\n",
              "      <td>0.815541</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-016f299a-e328-4f2b-b12f-bac599347d92')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-016f299a-e328-4f2b-b12f-bac599347d92 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-016f299a-e328-4f2b-b12f-bac599347d92');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 178
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now shown below are our best customer history activity, red dots in vertical for some certain day are the transaction user made before. The blue line are the alive probability, the more user make transaction, the higher the alive probability."
      ],
      "metadata": {
        "id": "m2wWZOJfbLVw"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mpvRGQWzqlHU",
        "outputId": "c4020a9a-60be-4982-8560-e050408a1b5a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        }
      },
      "source": [
        "fig = plt.figure(figsize=(10,6))\n",
        "id = '8d50f5eadf50201ccdcedfb9e2ac8455'\n",
        "days_since_birth = 365\n",
        "sp_trans = olist.loc[olist['CustomerId'] == id]\n",
        "plot_history_alive(bgf, days_since_birth, sp_trans, 'InvoiceDate')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now let us compare with some other user with not to high probability purchases but high alive probability, for example user `4facc2e6fbc2bffab2fea92d2b4aa7e4`. The chart below tell us if the user is just recently made it into the app, with only a few transaction, but since he just perform it recently, his alive probability is higher."
      ],
      "metadata": {
        "id": "5hq9IXC7bh-k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize=(10,6))\n",
        "id = '4facc2e6fbc2bffab2fea92d2b4aa7e4'\n",
        "days_since_birth = 365\n",
        "sp_trans = olist.loc[olist['CustomerId'] == id]\n",
        "plot_history_alive(bgf, days_since_birth, sp_trans, 'InvoiceDate')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "WG2LS0XdbFWn",
        "outputId": "c041b892-1f81-4f1d-9bcd-131b99db82e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Gamma Gamma Models"
      ],
      "metadata": {
        "id": "LfHOk4gvp-eo"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e0z047nxAiC-"
      },
      "source": [
        "Gamma gamma models is used in order to predict the monetary value of each customer or group of customer. In this section we only need monetary value and frequency column.\n",
        "\n",
        "When using gamma gamma models, there are assumption need to check. Between monetary value and frequency, their correlation need to stay low, otherwise we can't use this model. We need to exclude all record contain 0 or below from this data as well."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7xHqyLC1Aniw",
        "outputId": "3ea6ce7b-e207-4823-ec48-6d3533ab2078",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "summary = df[(df['frequency'] > 0)&(df['monetary_value'] > 0)]\n",
        "print(summary.head())\n",
        "print()\n",
        "print('\\nCustomers with atleast 1 repeat purchase\\n', len(summary))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                  frequency  recency      T  monetary_value  \\\n",
            "CustomerId                                                                    \n",
            "00172711b30d52eea8b313a7f2cced02        1.0     16.0   81.0          122.07   \n",
            "004288347e5e88a27ded2bb23747066c        1.0    171.0  447.0          103.28   \n",
            "004b45ec5c64187465168251cd1c9c2f        1.0    267.0  411.0           49.85   \n",
            "0058f300f57d7b93c477a131a59b36c3        1.0     31.0  240.0           96.02   \n",
            "00a39521eb40f7012db50455bf083460        1.0     11.0  147.0           26.78   \n",
            "\n",
            "                                  predicted_purchases  prob_alive  \n",
            "CustomerId                                                         \n",
            "00172711b30d52eea8b313a7f2cced02             0.010984    0.026893  \n",
            "004288347e5e88a27ded2bb23747066c             0.002732    0.027985  \n",
            "004b45ec5c64187465168251cd1c9c2f             0.005992    0.056778  \n",
            "0058f300f57d7b93c477a131a59b36c3             0.001811    0.010568  \n",
            "00a39521eb40f7012db50455bf083460             0.002823    0.010886  \n",
            "\n",
            "\n",
            "Customers with atleast 1 repeat purchase\n",
            " 2148\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mbhc8zYTrz5h"
      },
      "source": [
        "With only 2148 record qualified, below are the gamma gamma assumption check. Since the correlation between frequency and monetary value remain low, it is possible tyo perform gamma gamma models."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pgqX_rrOsH8x",
        "outputId": "258dd49a-591b-4458-d419-f5b8fadfbf5d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        }
      },
      "source": [
        "summary[['monetary_value', 'frequency']].corr()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                monetary_value  frequency\n",
              "monetary_value        1.000000   0.009424\n",
              "frequency             0.009424   1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f0ea2725-0d04-4a05-81be-4144df5c1a41\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>monetary_value</th>\n",
              "      <th>frequency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>monetary_value</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.009424</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>frequency</th>\n",
              "      <td>0.009424</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0ea2725-0d04-4a05-81be-4144df5c1a41')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f0ea2725-0d04-4a05-81be-4144df5c1a41 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f0ea2725-0d04-4a05-81be-4144df5c1a41');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 196
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YKcWPZhHsdSx"
      },
      "source": [
        "### Modelling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HOhqNePKAzkz",
        "outputId": "b2b5aeca-9d66-4cb2-e9c4-be7fd8e28de2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "ggf = GammaGammaFitter(penalizer_coef = 0)\n",
        "ggf.fit(summary['frequency'],\n",
        "        summary['monetary_value'])\n",
        "print(ggf)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<lifetimes.GammaGammaFitter: fitted with 2148 subjects, p: 6.10, q: 2.73, v: 43.99>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u78iV52kA5FF"
      },
      "source": [
        "After applying Gamma-Gamma model, now we can estimate average transaction value for each customer. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pA66ZCp0A8Kp",
        "outputId": "8dbd4481-86c2-4d65-9918-67375a2470da",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(ggf.conditional_expected_average_profit(\n",
        "        summary['frequency'],\n",
        "        summary['monetary_value']\n",
        "    ).head(10))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CustomerId\n",
            "00172711b30d52eea8b313a7f2cced02     129.375589\n",
            "004288347e5e88a27ded2bb23747066c     114.736144\n",
            "004b45ec5c64187465168251cd1c9c2f      73.108387\n",
            "0058f300f57d7b93c477a131a59b36c3     109.079818\n",
            "00a39521eb40f7012db50455bf083460      55.134358\n",
            "011575986092c30523ecb71ff10cb473      96.847817\n",
            "011b4adcd54683b480c4d841250a987f     151.042592\n",
            "012452d40dafae4df401bced74cdb490     299.221202\n",
            "012a218df8995d3ec3bb221828360c86    1153.046008\n",
            "013ef03e0f3f408dd9bf555e4edcdc0a      88.082848\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "These are the mean (average) and median of the profit olist make from their returning customer."
      ],
      "metadata": {
        "id": "RRku_ZmDjgzL"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7y6QrkLdspUT",
        "outputId": "1e2c87a3-5e6b-4044-e190-5b302846774f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(\"Expected conditional average profit: %s, Average profit: %s\" % (\n",
        "    ggf.conditional_expected_average_profit(\n",
        "        summary['frequency'],\n",
        "        summary['monetary_value']\n",
        "    ).mean(),\n",
        "    summary[summary['frequency']>0]['monetary_value'].mean()\n",
        "))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Expected conditional average profit: 154.64762007865068, Average profit: 154.35451749689634\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Expected conditional average profit: %s, Average profit: %s\" % (\n",
        "    ggf.conditional_expected_average_profit(\n",
        "        summary['frequency'],\n",
        "        summary['monetary_value']\n",
        "    ).median(),\n",
        "    summary[summary['frequency']>0]['monetary_value'].median()\n",
        "))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZMfOHBWdjtvB",
        "outputId": "022c421a-9afb-4912-f4f8-7ec7de7a471c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Expected conditional average profit: 118.52650589675423, Average profit: 108.33\n"
          ]
        }
      ]
    }
  ]
}